When would you want to use a remote repository rather than keeping all your work local?

When collaborating with other people on a project or when using multiple computers to work
on a project.



Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

In case there are changes made on both Git and the local repository, pulling manually
ensures that changes pulled are the ones that are wanted.



Describe the differences between forks, clones, and branches. When would you use one
instead of another?

A fork is a copy of another person's repository that is stored on GitHub, a clone is a copy
of a repository saved to a local host, and a branch is a seperate version of a 
repository that can be edited to add experimental features not intended to be released
with a master branch until it is finished. Forks would be used to copy another person's
repository while giving credit to the original poster. Clones would be used if work is being
done to a repository on different computers. Branches would be used to implement a new feature
that can be later merged to the master.



What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit is having a more up-to-date repository for changes being made and having to commit
a smaller size when updating an online repository on GitHub.



How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

One way of collaborating without Git or GitHub would be to email the file in question between
the collaborators. It would be easier if one of the collaborators didn't know how to use Git
or GitHub. It would be harder because any version control would'nt exist on the file, and going
back to any older version wouldn't be possible. Also, seeing any changes made would be harder
even if the difference was explained by the person who made the changes.



When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

When adding an experimental feature to a program that you aren't sure will work and you
don't want to disrupt the released version for users is when you would want to use a branch.
This way the master branch is undisrupted and can continue to be utilized until the feature
can be implemented and merged with it.